// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: chat.proto

package my_chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	Hi(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ChatMessage, error)
	HiStream(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (ChatService_HiStreamClient, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) Hi(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ChatMessage, error) {
	out := new(ChatMessage)
	err := c.cc.Invoke(ctx, "/chat.ChatService/Hi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) HiStream(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (ChatService_HiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[0], "/chat.ChatService/HiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceHiStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_HiStreamClient interface {
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type chatServiceHiStreamClient struct {
	grpc.ClientStream
}

func (x *chatServiceHiStreamClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	Hi(context.Context, *ChatMessage) (*ChatMessage, error)
	HiStream(*ChatMessage, ChatService_HiStreamServer) error
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) Hi(context.Context, *ChatMessage) (*ChatMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hi not implemented")
}
func (UnimplementedChatServiceServer) HiStream(*ChatMessage, ChatService_HiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HiStream not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_Hi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Hi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/Hi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Hi(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_HiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).HiStream(m, &chatServiceHiStreamServer{stream})
}

type ChatService_HiStreamServer interface {
	Send(*ChatMessage) error
	grpc.ServerStream
}

type chatServiceHiStreamServer struct {
	grpc.ServerStream
}

func (x *chatServiceHiStreamServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hi",
			Handler:    _ChatService_Hi_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HiStream",
			Handler:       _ChatService_HiStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat.proto",
}

// DockerExecClient is the client API for DockerExec service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DockerExecClient interface {
	Exec(ctx context.Context, opts ...grpc.CallOption) (DockerExec_ExecClient, error)
}

type dockerExecClient struct {
	cc grpc.ClientConnInterface
}

func NewDockerExecClient(cc grpc.ClientConnInterface) DockerExecClient {
	return &dockerExecClient{cc}
}

func (c *dockerExecClient) Exec(ctx context.Context, opts ...grpc.CallOption) (DockerExec_ExecClient, error) {
	stream, err := c.cc.NewStream(ctx, &DockerExec_ServiceDesc.Streams[0], "/chat.DockerExec/Exec", opts...)
	if err != nil {
		return nil, err
	}
	x := &dockerExecExecClient{stream}
	return x, nil
}

type DockerExec_ExecClient interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type dockerExecExecClient struct {
	grpc.ClientStream
}

func (x *dockerExecExecClient) Send(m *ChatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dockerExecExecClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DockerExecServer is the server API for DockerExec service.
// All implementations must embed UnimplementedDockerExecServer
// for forward compatibility
type DockerExecServer interface {
	Exec(DockerExec_ExecServer) error
	mustEmbedUnimplementedDockerExecServer()
}

// UnimplementedDockerExecServer must be embedded to have forward compatible implementations.
type UnimplementedDockerExecServer struct {
}

func (UnimplementedDockerExecServer) Exec(DockerExec_ExecServer) error {
	return status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedDockerExecServer) mustEmbedUnimplementedDockerExecServer() {}

// UnsafeDockerExecServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DockerExecServer will
// result in compilation errors.
type UnsafeDockerExecServer interface {
	mustEmbedUnimplementedDockerExecServer()
}

func RegisterDockerExecServer(s grpc.ServiceRegistrar, srv DockerExecServer) {
	s.RegisterService(&DockerExec_ServiceDesc, srv)
}

func _DockerExec_Exec_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DockerExecServer).Exec(&dockerExecExecServer{stream})
}

type DockerExec_ExecServer interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ServerStream
}

type dockerExecExecServer struct {
	grpc.ServerStream
}

func (x *dockerExecExecServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dockerExecExecServer) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DockerExec_ServiceDesc is the grpc.ServiceDesc for DockerExec service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DockerExec_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.DockerExec",
	HandlerType: (*DockerExecServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Exec",
			Handler:       _DockerExec_Exec_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}
